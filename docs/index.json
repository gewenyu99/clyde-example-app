[
    
    
    {
        "url": "/docs/quick-start/init/",
        "title": "Initialize Hugo",
        "content": "{row-divider} Before we begin, install Hugo on your system. Hugo Documentation {divider} {row-divider}\nInitialize your repo Create a new Hugo site and initialize it as a git repo.\nThen, we can add the Clyde theme. {divider}\nhugo new site example-site cd example-site git init git submodule add https://github.com/DNAstack/clyde.git themes/clyde {row-divider}\nConfigure your Hugo site to use Clyde Copy the toml config on the right into your config.toml file.\nWe\u0026rsquo;ll cover the details of configuring your site in another section. {divider}  config.toml   baseURL = \u0026#34;http://example.org/\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;Example Application\u0026#34; theme = \u0026#34;clyde\u0026#34; pygmentsUseClasses=true publishDir = \u0026#34;docs\u0026#34; relativeURLs = true canonifyURLs = true [markup] [markup.goldmark] [markup.goldmark.extensions] definitionList = true footnote = true linkify = true strikethrough = true table = true taskList = true typographer = true [markup.goldmark.parser] attribute = true autoHeadingID = true autoHeadingIDType = \u0026#34;github\u0026#34; [markup.goldmark.renderer] hardWraps = false unsafe = false xhtml = false [params] #colors secondary = \u0026#34;#1E1F21\u0026#34; sidebar_bg = \u0026#34;#f6f6f8\u0026#34; sidebar_primary = \u0026#34;#1E1F21\u0026#34; primary = \u0026#34;#fff\u0026#34; accent = \u0026#34;#e3413a\u0026#34; grey200 = \u0026#34;#F9F9FA\u0026#34; grey600 = \u0026#34;#969DAC\u0026#34; grey_head= \u0026#34;#EFEFF3\u0026#34; logo = \u0026#34;/default_button.png\u0026#34; home = \u0026#34;/quick-start\u0026#34; [outputs] section = [\u0026#34;JSON\u0026#34;, \u0026#34;HTML\u0026#34;] home = [\u0026#34;JSON\u0026#34;]     {row-divider}\nAdd your first document Hugo renders Markdown content from the content folder.\nClyde renders its primary documentation style content from the content/docs folder. You can still use other folders to render custom static html content.\ncontent/docs/first-category/_index.md specifies the way the category menu will be rendered, it\u0026rsquo;s an empty markdown file with frontmatter to configure the application. In fact, Clyde will render a menu for any markdown file with a type : \u0026quot;category\u0026quot; in the frontmatter.\ncontent/docs/first-category/content.md is a document under the _index.md first category file. It uses a single column layouts, more on layouts later. {divider}  content/docs/first-category/_index.md content/docs/first-category/content.md   --- title: \u0026#34;First Category\u0026#34; icon: \u0026#34;icon-layers\u0026#34; type : \u0026#34;category\u0026#34; weight: 1 ---   --- title: \u0026#34;Doc\u0026#34; weight: 2 draft: false lastmod: 2020-11-5 type: docs layout: single-col --- #### Hi!    \n{row-divider}\nTesting it out That\u0026rsquo;s it, you can start writing pages in markdown and see them updated in real time! {divider}\nhugo serve # if you want to include drafts hugo serve -D {row-divider}\nBuild it That\u0026rsquo;s it, you can start writing pages in markdown and see them updated in real time! {divider}\nhugo # if you want to include drafts hugo -D "
    }
    
    , 
    {
        "url": "/docs/folder-structure/project-structure/",
        "title": "Project Structure",
        "content": "{row-divider}\nBase Structure Take a look at the base file structure, we\u0026rsquo;ll talk about what each folder does through this section.\nContent The content folder is where your content lives. The subfolders like docs and api define subroutes under the site, which will index unique sidebar menu items (we\u0026rsquo;ll talk more about the sidebar later).\nStatic The static folder is where I recommend you keep stuff like images and other non-markdown material here. The static folder\u0026rsquo;s content is served directly under the base url. For example static/image.png maps to http://baseurl.com/image.png. This can be then referenced with markdown.\nThemes/clyde This is where clyde lives. We\u0026rsquo;ll talk about clyde in its own section.\n{divider}  File Structure   . ├── archetypes ├── content │ └── docs -\u0026gt; http://baseurl.com/api │ ├── category -\u0026gt; http://baseurl.com/api/subsection │ └── ... │ └── api -\u0026gt; http://baseurl.com/api │ └── ... ├── data ├── layouts ├── static └── themes └── clyde ├── archetypes ├── layouts │ ├── _default │ ├── docs │ ├── partials │ │ └── page-layouts │ └── shortcodes │ └── code └── static ├── css │ ├── page-layouts │ ├── sidebar │ └── tabs ├── feather-icons │ ├── css │ ├── fonts │ └── icons └── js    \n"
    }
    
    , 
    {
        "url": "/docs/quick-start/",
        "title": "Quick Start",
        "content": ""
    }
    
    , 
    {
        "url": "/docs/short-code/shortcode/",
        "title": "Shortcode",
        "content": "{row-divider}\n Introduction Short codes are used as markdown inserts. They allow us to use custom rendering logic to render code blocks, floating tab windows, videos, images, and many other cool things! {divider} Quick Links  Hugo Shortcodes\n  {row-divider}\nA note about render logic Shortcode can render its inners as markdown, or plain text.\nUse this when nesting shortcode, or when you need to display markdown that doesn\u0026rsquo;t need to be rendered. {divider}  Not Rendered Rendered   this isn't rendered ``` SQL /* you can scroll on this tab */ SELECT * FROM kidsfirst.ga4gh_tables.patient WHERE Json_extract_scalar(patient, '$.gender') = 'female' LIMIT 5; ```  This is rendered\n/* you can scroll on this tab */ SELECT Json_extract_scalar(ncpi_disease, \u0026#39;$.code.text\u0026#39;) AS disease, Json_extract_scalar(ncpi_disease, \u0026#39;$.identifier[0].value\u0026#39;) AS identifier FROM kidsfirst.ga4gh_tables.ncpi_disease disease INNER JOIN kidsfirst.ga4gh_tables.patient patient ON patient.id = REPLACE(Json_extract_scalar(ncpi_disease, \u0026#39;$.subject.reference\u0026#39;), \u0026#39;Patient/\u0026#39;) WHERE Json_extract_scalar(patient, \u0026#39;$.gender\u0026#39;) = \u0026#39;female\u0026#39; LIMIT 5;    \n"
    }
    
    , 
    {
        "url": "/docs/layout/single/",
        "title": "Single Column",
        "content": "This page is a single column page!\nIt\u0026rsquo;s just standard Markdown\n Python R CLI   print(\u0026#34;Clyde is a name!\u0026#34;)   print(\u0026#34;Clyde is a name!\u0026#34;)   Clyde dislikes commandline interfaces.\n  Everything is just in a single column, just specify layout: single-col in the frontmatter.\n--- title: \u0026#34;Single Column\u0026#34; weight: 1 draft: false lastmod: 2020-11-5 type: docs layout: single-col --- "
    }
    
    , 
    {
        "url": "/docs/layout/two-col/",
        "title": "Two Column",
        "content": "{row-divider} This page is in two columns!\nIt\u0026rsquo;s just standard Markdown with a minor addition.\nYou\u0026rsquo;ll need to add a { row-divider } in markdown to indicate a new row of content.\nYou\u0026rsquo;ll need to add a { divider } in markdown to indicate where to split the row.\nClyde will only display content that is properly formatted like this.\nIf Clyde feels the window is to narrow, it will wrap the page responsively into a single column.\nCheck the source code of this page to see the details. Clyde is a man of habbit, he will render the divider tags if I include them in this page.\n  Rules are rules man - Clyde 2020   {divider}  Python R CLI   print(\u0026#34;Clyde is a name!\u0026#34;)   print(\u0026#34;Clyde is a name!\u0026#34;)   Clyde dislikes commandline interfaces.\n \n"
    }
    
    , 
    {
        "url": "/docs/quick-start/config/",
        "title": "Configuration",
        "content": "{row-divider}\nBase URL The base URL has 2 components.\n http://example.org/ is a generic domain place holder, this shows Hugo where the base domain begins and ends clyde-example-app/ this is where you specify the root route of your app. All relative urls will resolve to clyde-example-app/\u0026lt;hugo routing\u0026gt;/... {divider}  baseURL = \u0026#34;http://example.org/clyde-example-app/\u0026#34; {row-divider}\nColor pallet Clyde is themable, you can make clyde match the color scheme of your projects easily. These parameters can be modified under config.toml {divider}\n[params] #colors secondary = \u0026#34;#1E1F21\u0026#34; sidebar_bg = \u0026#34;#f6f6f8\u0026#34; sidebar_primary = \u0026#34;#1E1F21\u0026#34; primary = \u0026#34;#fff\u0026#34; accent = \u0026#34;#e3413a\u0026#34; grey200 = \u0026#34;#F9F9FA\u0026#34; grey600 = \u0026#34;#969DAC\u0026#34; grey_head= \u0026#34;#EFEFF3\u0026#34; {row-divider}\nLogos Clyde allows you to use square logos for your site. It will appear on the top of the sidebar menu, when the menu auto collapses, you can reopen it using the logo as a button.\nYou can also just use a red circle provided by Clyde, it\u0026rsquo;s not very pretty though. {divider}\n#red circle [params] logo = \u0026#34;/default_button.png\u0026#34; {row-divider}\nTop nav links Clyde allows you to add nav links on the top bar. Clyde suggests you use these for external links, or links to parts of your app outside the /docs folder. This is for better UX design consistency.\nYou can order them using the weight parameter and add icons through the pre parameter. (We use feather icons)\nThe url can be relative to the app, or absolute.\n{divider}\n[menu] [[menu.main]] identifier = \u0026#34;home\u0026#34; pre = \u0026#34;\u0026lt;i class=\u0026#39;icon-home\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; name = \u0026#34;Home\u0026#34; url = \u0026#34;/\u0026#34; weight = -999 [[menu.main]] identifier = \u0026#34;git\u0026#34; pre = \u0026#34;\u0026lt;i class=\u0026#39;icon-github\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; name = \u0026#34;Github\u0026#34; url = \u0026#34;https://github.com/gewenyu99/clyde-example-app\u0026#34; weight = 1 "
    }
    
    , 
    {
        "url": "/docs/folder-structure/",
        "title": "Folder Structure",
        "content": ""
    }
    
    , 
    {
        "url": "/docs/layout/",
        "title": "Page Layout",
        "content": ""
    }
    
    , 
    {
        "url": "/docs/folder-structure/section-structure/",
        "title": "Section Structure",
        "content": "{row-divider}\nWhat are sections? Each subfolder under content is a section, for example: content/docs. Each section has its unique, auto generated sidebar menu. We keep these sections 2 layers deep, with a structure of type: category/type: docs. {divider}\ncontent └── docs ├── folder-structure │ ├── _index.md │ ├── project-structure.md │ └── section-structure.md ├── layout │ ├── _index.md │ ├── single.md │ └── two-col.md ├── quick-start │ ├── _index.md │ ├── config.md │ └── init.md └── short-code ├── _index.md └── two-col.md {row-divider}\nHow the sidebar menu works Notice the _index.md file in each folder under the docs section? They specify how the category represented by each folder is rendered at the side bar.\nThe example provided is the Folder Structure category.\ntitle: \u0026quot;Folder Structure\u0026quot; specifies the name of the side bar item. icon: \u0026quot;icon-folder\u0026quot; specifies icon name (we use feather icons). type : \u0026quot;category\u0026quot; specifies that this file is rendered as a category weight: 2 is used to order the menu items, from 1 onwards\nThe files, like section-structure.md have type: docs specified in the front matter. These are the subitems of each category. title: \u0026quot;Folder Structure\u0026quot; specifies the name of the side bar item. draft: \u0026quot;false\u0026quot; is used to mark drafts, so they\u0026rsquo;re ignored during builds type : \u0026quot;docs\u0026quot; specifies that this file is rendered as a document item weight: 2 is used to order the menu items, from 1 onwards layout: two-col specifies the layout\n{divider}  _index.md section-structure.md   --- title: \u0026#34;Folder Structure\u0026#34; icon: \u0026#34;icon-folder\u0026#34; type : \u0026#34;category\u0026#34; weight: 2 ---   --- title: \u0026#34;Section Structure\u0026#34; weight: 2 draft: false lastmod: 2020-11-5 type: docs layout: two-col ---    \n"
    }
    
    , 
    {
        "url": "/docs/short-code/tabs/",
        "title": "Tabs",
        "content": "{row-divider}\nTabs You\u0026rsquo;ve seen these things, they\u0026rsquo;re the centerpiece of Clyde\u0026rsquo;s aesthetics.\nThe following example is derived from GA4GH Discovery Docs, which is written using Clyde. {divider}  Example #1 Example #2   This query returns all female patients from the patient table.\n/* you can scroll on this tab */ SELECT * FROM kidsfirst.ga4gh_tables.patient WHERE Json_extract_scalar(patient, \u0026#39;$.gender\u0026#39;) = \u0026#39;female\u0026#39; LIMIT 5;   This query returns all conditions observed in female patients from the patient table.\n/* you can scroll on this tab */ SELECT Json_extract_scalar(ncpi_disease, \u0026#39;$.code.text\u0026#39;) AS disease, Json_extract_scalar(ncpi_disease, \u0026#39;$.identifier[0].value\u0026#39;) AS identifier FROM kidsfirst.ga4gh_tables.ncpi_disease disease INNER JOIN kidsfirst.ga4gh_tables.patient patient ON patient.id = REPLACE(Json_extract_scalar(ncpi_disease, \u0026#39;$.subject.reference\u0026#39;), \u0026#39;Patient/\u0026#39;) WHERE Json_extract_scalar(patient, \u0026#39;$.gender\u0026#39;) = \u0026#39;female\u0026#39; LIMIT 5;     {row-divider}\nUsing tabs A few key details to note\n tabTotal defines number of tabs defined tabID should be unique for the page, this is the reference to trigger navigation switching tabName1 through tabNameX are the names displayed on the navigation buttons The inner tags should use % % tag over \u0026lt; \u0026gt; to render inner markdown properly tabNum=\u0026quot;X\u0026quot; should match its tab name number  {divider}\n{{\u0026lt; tabs tabTotal=\u0026#34;2\u0026#34; tabID=\u0026#34;float2\u0026#34; tabName1=\u0026#34;Example #1\u0026#34; tabName2=\u0026#34;Example #2\u0026#34; \u0026gt;}} {{% tab tabNum=\u0026#34;1\u0026#34; %}} content1 {{% /tab %}} {{% tab tabNum=\u0026#34;2\u0026#34; %}} content2 {{% /tab %}} {{\u0026lt; /tabs \u0026gt;}} "
    }
    
    , 
    {
        "url": "/docs/short-code/",
        "title": "Shortcode",
        "content": ""
    }
    
    , 
    {
        "url": "/categories/",
        "title": "Categories",
        "content": ""
    }
    
    , 
    {
        "url": "/index.json",
        "title": "Clyde Sample App",
        "content": ""
    }
    
    , 
    {
        "url": "/docs/",
        "title": "Docs",
        "content": ""
    }
    
    , 
    {
        "url": "/tags/",
        "title": "Tags",
        "content": ""
    }
    
]