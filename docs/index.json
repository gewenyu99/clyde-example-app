[
    
    
    {
        "url": "/docs/quick-start/init/",
        "title": "Initialize Hugo",
        "content": "{row-divider} Before we begin, install Hugo on your system.\nHugo Documentation\nYou\u0026rsquo;ll also need git for source control and an IDE you\u0026rsquo;re comfortable with. Clyde was written with Visual Studio Code. {divider} {row-divider}\nInitialize your repo Create a new Hugo site and initialize it as a git repo.\nThen, we can add the Clyde theme. {divider}\nhugo new site example-site cd example-site git init git submodule add https://github.com/DNAstack/clyde.git themes/clyde {row-divider}\nConfigure your Hugo site to use Clyde Copy the toml config on the right into your config.toml file.\nWe\u0026rsquo;ll cover the details of configuring your site in another section. {divider}  config.toml   baseURL = \u0026#34;http://example.org/clyde-example-app/\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;Clyde Sample App\u0026#34; theme = \u0026#34;clyde\u0026#34; pygmentsUseClasses=true publishDir = \u0026#34;docs\u0026#34; relativeURLs = true canonifyURLs = true [markup] [markup.goldmark] [markup.goldmark.extensions] definitionList = true footnote = true linkify = true strikethrough = true table = true taskList = true typographer = true [markup.goldmark.parser] attribute = true autoHeadingID = true autoHeadingIDType = \u0026#34;github\u0026#34; [markup.goldmark.renderer] hardWraps = false unsafe = false xhtml = false [params] #colors secondary = \u0026#34;#1E1F21\u0026#34; sidebar_bg = \u0026#34;#f6f6f8\u0026#34; sidebar_primary = \u0026#34;#1E1F21\u0026#34; primary = \u0026#34;#fff\u0026#34; accent = \u0026#34;#e3413a\u0026#34; grey200 = \u0026#34;#F9F9FA\u0026#34; grey600 = \u0026#34;#1E1F21\u0026#34; grey_head= \u0026#34;#EFEFF3\u0026#34; logo = \u0026#34;/default_button.png\u0026#34; home = \u0026#34;/docs/\u0026#34; heading_font = \u0026#34;Poppins\u0026#34; body_font = \u0026#34;Roboto\u0026#34; code_font = \u0026#34;Source Code Pro\u0026#34; [outputs] section = [\u0026#34;HTML\u0026#34;] home = [\u0026#34;JSON\u0026#34;, \u0026#34;HTML\u0026#34;] [menu] [[menu.main]] identifier = \u0026#34;home\u0026#34; pre = \u0026#34;\u0026lt;i class=\u0026#39;icon-home\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; name = \u0026#34;Home\u0026#34; url = \u0026#34;/\u0026#34; weight = -999 [[menu.main]] identifier = \u0026#34;git\u0026#34; pre = \u0026#34;\u0026lt;i class=\u0026#39;icon-github\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; name = \u0026#34;Github\u0026#34; url = \u0026#34;https://github.com/gewenyu99/clyde-example-app\u0026#34; weight = 1     {row-divider}\nAdd your first document Hugo renders Markdown content from the content folder.\nClyde renders its primary documentation style content from the content/docs folder. You can still use other folders to render custom static html content.\nTake the example: content/docs/quick-start/_index.md. The file _index.md specifies the way the category menu will be rendered, it\u0026rsquo;s an empty markdown file with frontmatter to configure the application. In fact, Clyde will render a menu for any markdown file with a type : \u0026quot;category\u0026quot; in the frontmatter.\ncontent/docs/quick-start/init.md (this page) is a document under the _index.md quick-start category file. It uses a two column layouts, more on layouts here. {divider}  _index.md quickstart.md   --- title: \u0026#34;Quick Start\u0026#34; icon: \u0026#34;icon-layers\u0026#34; type : \u0026#34;category\u0026#34; weight: 1 ---   --- title: \u0026#34;Initialize Hugo\u0026#34; weight: 1 draft: false lastmod: 2020-11-5 type: docs layout: two-col --- ...    \n{row-divider}\nTesting it out That\u0026rsquo;s it, you can start writing pages in markdown and see them updated in real time! {divider}\nhugo serve # if you want to include drafts hugo serve -D {row-divider}\nBuild it That\u0026rsquo;s it, you can start writing pages in markdown and see them updated in real time! {divider}\nhugo # if you want to include drafts hugo -D "
    }
    
    , 
    {
        "url": "/docs/folder-structure/project-structure/",
        "title": "Project Structure",
        "content": "{row-divider}\nBase Structure Take a look at the base file structure, we\u0026rsquo;ll talk about what each folder does through this section.\nContent The content folder is where your content lives. The sub-folders like docs and api define routes under the site, which will index unique sidebar menu items (we\u0026rsquo;ll talk more about the sidebar later).\nStatic The static folder is where I recommend you keep stuff like images and other non-markdown material here. The static folder\u0026rsquo;s content is served directly under the base url. For example static/image.png maps to http://baseurl.com/image.png. An example of this can be found here: /default_button.png.\nThemes/clyde This is where Clyde lives. We\u0026rsquo;ll talk about contributing to Clyde in its own section.\n{divider}  File Structure   . ├── archetypes ├── content │ └── docs -\u0026gt; http://baseurl.com/docs │ ├── category -\u0026gt; http://baseurl.com/docs/subsection │ └── ... │ └── api -\u0026gt; http://baseurl.com/api │ └── ... ├── data ├── layouts ├── static └── themes └── clyde ├── archetypes ├── layouts │ ├── _default │ ├── docs │ ├── partials │ │ └── page-layouts │ └── shortcodes │ └── code └── static ├── css │ ├── page-layouts │ ├── sidebar │ └── tabs ├── feather-icons │ ├── css │ ├── fonts │ └── icons └── js    \n"
    }
    
    , 
    {
        "url": "/docs/quick-start/",
        "title": "Quick Start",
        "content": ""
    }
    
    , 
    {
        "url": "/docs/layout/single/",
        "title": "Single Column",
        "content": "This page is a single column page!\nIt\u0026rsquo;s just standard Markdown\n Python R CLI   print(\u0026#34;Clyde is a name!\u0026#34;)   print(\u0026#34;Clyde is a name!\u0026#34;)   Clyde dislikes commandline interfaces.\n  Everything is just in a single column, just specify layout: single-col in the frontmatter.\n--- title: \u0026#34;Single Column\u0026#34; weight: 1 draft: false lastmod: 2020-11-5 type: docs layout: single-col --- "
    }
    
    , 
    {
        "url": "/docs/short-code/shortcode/",
        "title": "The Basics",
        "content": "{row-divider}\n Introduction Short codes are used as markdown inserts. They allow us to use custom rendering logic to render code blocks, floating tab windows, videos, images, and many other cool things! {divider} Quick Links  Hugo Shortcodes\n  {row-divider}\nA note about render logic Shortcode can render its inners as markdown, or plain text.\nUse this when nesting shortcode, or when you need to display markdown that doesn\u0026rsquo;t need to be rendered. {divider}  Not Rendered Rendered   this isn't rendered ``` SQL /* you can scroll on this tab */ SELECT * FROM kidsfirst.ga4gh_tables.patient WHERE Json_extract_scalar(patient, '$.gender') = 'female' LIMIT 5; ```  This is rendered\n/* you can scroll on this tab */ SELECT Json_extract_scalar(ncpi_disease, \u0026#39;$.code.text\u0026#39;) AS disease, Json_extract_scalar(ncpi_disease, \u0026#39;$.identifier[0].value\u0026#39;) AS identifier FROM kidsfirst.ga4gh_tables.ncpi_disease disease INNER JOIN kidsfirst.ga4gh_tables.patient patient ON patient.id = REPLACE(Json_extract_scalar(ncpi_disease, \u0026#39;$.subject.reference\u0026#39;), \u0026#39;Patient/\u0026#39;) WHERE Json_extract_scalar(patient, \u0026#39;$.gender\u0026#39;) = \u0026#39;female\u0026#39; LIMIT 5;    \n"
    }
    
    , 
    {
        "url": "/docs/layout/two-col/",
        "title": "Two Column",
        "content": "{row-divider} This page is in two columns!\nIt\u0026rsquo;s just standard Markdown with a minor addition.\nYou\u0026rsquo;ll need to add a { row-divider } in markdown to indicate a new row of content.\nYou\u0026rsquo;ll need to add a { divider } in markdown to indicate where to split the row.\nClyde will only display content that is properly formatted like this.\nIf Clyde feels the window is to narrow, it will wrap the page responsively into a single column.\nYou must always have both divider tags for a section, nay a page to render correctly, even if they\u0026rsquo;re empty. Clyde is a man of habbit, he will only render if you include them.\n  Rules are rules man - Clyde 2020   {divider} Check this page\u0026rsquo;s source code for an example of how to use a two column layout.\n Python R CLI   print(\u0026#34;Clyde is a name!\u0026#34;)   print(\u0026#34;Clyde is a name!\u0026#34;)   Clyde dislikes commandline interfaces.\n  "
    }
    
    , 
    {
        "url": "/docs/quick-start/config/",
        "title": "Configuration",
        "content": "{row-divider} This page will cover the basics of configuring Clyde.\nBase URL The base URL has 2 components.\n http://example.org/ is a generic domain place holder, this shows Hugo where the base domain begins and ends clyde-example-app/ this is where you specify the root route of your app. All relative urls will resolve to clyde-example-app/\u0026lt;hugo routing\u0026gt;/.... This is used when deploying to Github pages. {divider}  baseURL = \u0026#34;http://example.org/clyde-example-app/\u0026#34; {row-divider}\nBasic Information title specifies the displayed name of your site\ntheme specifies theme used, which is clyde in this case.\npygmentsUseClasses allows us to customize code highlight colors\npublishDir specifies which folder into which Clyde compiles the built site.\nrelativeURLs and canonifyURLs are specified to make Clyde\u0026rsquo;s sidebar menu work properly. Don\u0026rsquo;t worry about these, keep them on true. {divider}\ntitle = \u0026#34;Clyde Sample App\u0026#34; theme = \u0026#34;clyde\u0026#34; pygmentsUseClasses=true publishDir = \u0026#34;docs\u0026#34; relativeURLs = true canonifyURLs = true {row-divider}\nColor pallet Clyde is themable, you can make clyde match the color scheme of your projects easily. These parameters can be modified under config.toml.\n[params] #colors secondary = \u0026#34;#1E1F21\u0026#34; sidebar_bg = \u0026#34;#f6f6f8\u0026#34; sidebar_primary = \u0026#34;#1E1F21\u0026#34; primary = \u0026#34;#fff\u0026#34; accent = \u0026#34;#e3413a\u0026#34; grey200 = \u0026#34;#F9F9FA\u0026#34; grey600 = \u0026#34;#969DAC\u0026#34; grey_head= \u0026#34;#EFEFF3\u0026#34; {divider}\n// These are the defined colors available for configuration // Not all are used by default, but you can use these for custom theming of Clyde components. --white: #ffffff; --primary: {{ .Site.Params.primary }}; --secondary: {{ .Site.Params.secondary }}; --sidebar-bg: {{ .Site.Params.sidebar_bg }}; --sidebar-primary: {{ .Site.Params.sidebar_primary }}; --accent: {{ .Site.Params.accent }}; --grey100: {{ .Site.Params.grey100 }}; --grey200: {{ .Site.Params.grey200 }}; --grey300: {{ .Site.Params.grey300 }}; --grey400: {{ .Site.Params.grey400 }}; --grey500: {{ .Site.Params.grey500 }}; --grey600: {{ .Site.Params.grey600 }}; --grey700: {{ .Site.Params.grey700 }}; --grey800: {{ .Site.Params.grey800 }}; --grey900: {{ .Site.Params.grey900 }}; --grey-head: {{ .Site.Params.grey_head }}; --nav-highlight: {{ .Site.Params.nav_highlight }}; {row-divider}\nLogos Clyde allows you to use square logos for your site. It will appear on the top of the sidebar menu, when the menu auto collapses, you can reopen it using the logo as a button.\nYou can also just use Clyde\u0026rsquo;s default icon, it\u0026rsquo;s not very pretty though. {divider}\n#red circle [params] logo = \u0026#34;/default_button.png\u0026#34; {row-divider}\nTop nav links Clyde allows you to add nav links on the top bar. Clyde suggests you use these for external links, or links to parts of your app outside the /docs folder. This is for better UX design consistency.\nYou can order them using the weight parameter and add icons through the pre parameter. (We use feather icons)\nThe url can be relative to the app, or absolute.\n{divider}\n[menu] [[menu.main]] identifier = \u0026#34;home\u0026#34; pre = \u0026#34;\u0026lt;i class=\u0026#39;icon-home\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; name = \u0026#34;Home\u0026#34; url = \u0026#34;/\u0026#34; weight = -999 [[menu.main]] identifier = \u0026#34;git\u0026#34; pre = \u0026#34;\u0026lt;i class=\u0026#39;icon-github\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; name = \u0026#34;Github\u0026#34; url = \u0026#34;https://github.com/gewenyu99/clyde-example-app\u0026#34; weight = 1 "
    }
    
    , 
    {
        "url": "/docs/folder-structure/",
        "title": "Folder Structure",
        "content": ""
    }
    
    , 
    {
        "url": "/docs/layout/",
        "title": "Page Layout",
        "content": ""
    }
    
    , 
    {
        "url": "/docs/folder-structure/section-structure/",
        "title": "Section Structure",
        "content": "{row-divider}\nWhat are sections? Each subfolder under content is a section, for example: content/docs. Each section has its unique, auto generated sidebar menu. We keep these sections 2 layers deep, with a structure of type: category/type: docs. {divider}\ncontent └── docs ├── folder-structure │ ├── _index.md │ ├── project-structure.md │ └── section-structure.md ├── layout │ ├── _index.md │ ├── single.md │ └── two-col.md ├── quick-start │ ├── _index.md │ ├── config.md │ └── init.md └── short-code ├── _index.md └── two-col.md {row-divider}\nHow the sidebar menu works Notice the _index.md file in each folder under the docs section? They specify how the category represented by each folder is rendered at the side bar.\nThe example provided is the Folder Structure category.\ntitle: \u0026quot;Folder Structure\u0026quot; specifies the name of the side bar item. icon: \u0026quot;icon-folder\u0026quot; specifies icon name (we use feather icons). type : \u0026quot;category\u0026quot; specifies that this file is rendered as a category weight: 2 is used to order the menu items, from 1 onwards\nThe files, like section-structure.md have type: docs specified in the front matter. These are the subitems of each category. title: \u0026quot;Folder Structure\u0026quot; specifies the name of the side bar item. draft: \u0026quot;false\u0026quot; is used to mark drafts, so they\u0026rsquo;re ignored during builds type : \u0026quot;docs\u0026quot; specifies that this file is rendered as a document item weight: 2 is used to order the menu items, from 1 onwards layout: two-col specifies the layout\n{divider}  _index.md section-structure.md   --- title: \u0026#34;Folder Structure\u0026#34; icon: \u0026#34;icon-folder\u0026#34; type : \u0026#34;category\u0026#34; weight: 2 ---   --- title: \u0026#34;Section Structure\u0026#34; weight: 2 draft: false lastmod: 2020-11-5 type: docs layout: two-col ---    \n"
    }
    
    , 
    {
        "url": "/docs/short-code/tabs/",
        "title": "Tabs",
        "content": "{row-divider}\nTabs You\u0026rsquo;ve seen these things, they\u0026rsquo;re the centerpiece of Clyde\u0026rsquo;s aesthetics.\nThe following example is derived from GA4GH Discovery Docs, which is written using Clyde. {divider}  Example #1 Example #2   This query returns all female patients from the patient table.\n/* you can scroll on this tab */ SELECT * FROM kidsfirst.ga4gh_tables.patient WHERE Json_extract_scalar(patient, \u0026#39;$.gender\u0026#39;) = \u0026#39;female\u0026#39; LIMIT 5;   This query returns all conditions observed in female patients from the patient table.\n/* you can scroll on this tab */ SELECT Json_extract_scalar(ncpi_disease, \u0026#39;$.code.text\u0026#39;) AS disease, Json_extract_scalar(ncpi_disease, \u0026#39;$.identifier[0].value\u0026#39;) AS identifier FROM kidsfirst.ga4gh_tables.ncpi_disease disease INNER JOIN kidsfirst.ga4gh_tables.patient patient ON patient.id = REPLACE(Json_extract_scalar(ncpi_disease, \u0026#39;$.subject.reference\u0026#39;), \u0026#39;Patient/\u0026#39;) WHERE Json_extract_scalar(patient, \u0026#39;$.gender\u0026#39;) = \u0026#39;female\u0026#39; LIMIT 5;     {row-divider}\nUsing tabs A few key details to note\n tabTotal defines number of tabs defined tabID should be unique for the page, this is the reference to trigger navigation switching tabName1 through tabNameX are the names displayed on the navigation buttons The inner tags should use % % tag over \u0026lt; \u0026gt; to render inner markdown properly tabNum=\u0026quot;X\u0026quot; should match its tab name number  {divider}\n{{\u0026lt; tabs tabTotal=\u0026#34;2\u0026#34; tabID=\u0026#34;float2\u0026#34; tabName1=\u0026#34;Example #1\u0026#34; tabName2=\u0026#34;Example #2\u0026#34; \u0026gt;}} {{% tab tabNum=\u0026#34;1\u0026#34; %}} content1 {{% /tab %}} {{% tab tabNum=\u0026#34;2\u0026#34; %}} content2 {{% /tab %}} {{\u0026lt; /tabs \u0026gt;}} "
    }
    
    , 
    {
        "url": "/docs/short-code/float/",
        "title": "Floating Windows",
        "content": "{row-divider}\nLet me demonstrate why floating windows are amazing The following text is to demonstrate the necessity of floating windows when code snippets have long descriptions.\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u0026quot;\nSection 1.10.32 of \u0026ldquo;de Finibus Bonorum et Malorum\u0026rdquo;, written by Cicero in 45 BC \u0026ldquo;Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\u0026rdquo;\n1914 translation by H. Rackham \u0026ldquo;But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?\u0026rdquo;\nSection 1.10.33 of \u0026ldquo;de Finibus Bonorum et Malorum\u0026rdquo;, written by Cicero in 45 BC \u0026ldquo;At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\u0026rdquo;\n1914 translation by H. Rackham \u0026ldquo;On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains.\u0026rdquo;\nNotice how the window follows you as you read? I know, it\u0026rsquo;s just lorem ipsum. But the floating window allows you to keep referencing the floating window as you scroll through lots of text {divider}\n Code Not Code   print(\u0026#34;Look, I\u0026#39;m floating)   Regular text\nalso markdown\n      {row-divider}\nThis is how you float your items This is the shortcode that powers the floating window above.\nYou can get really creative with your floating windows, for example, allowing the viewer to follow along a transcript with a floating video. {divider}\n Floating Windows   {\u0026lt;/* code/float-window */\u0026gt;}} {{\u0026lt; tabs tabTotal=\u0026#34;2\u0026#34; tabID=\u0026#34;1\u0026#34; tabName1=\u0026#34;Code\u0026#34; tabName2=\u0026#34;Not Code\u0026#34; \u0026gt;}} {{% tab tabNum=\u0026#34;1\u0026#34; %}} ``` python print(\u0026#34;Look, I\u0026#39;m floating) ``` {{% /tab %}} {{% tab tabNum=\u0026#34;2\u0026#34; %}} Regular text _also markdown_ {{% /tab %}} {{\u0026lt; /tabs \u0026gt;}} {{\u0026lt; /code/float-window \u0026gt;}} {{\u0026lt; code/float-window \u0026gt;}} {{\u0026lt; youtube LDU_Txk06tM \u0026gt;}} {{\u0026lt; /code/float-window \u0026gt;}}     "
    }
    
    , 
    {
        "url": "/docs/short-code/",
        "title": "Shortcode",
        "content": ""
    }
    
    , 
    {
        "url": "/index.json",
        "title": "Clyde's Guide",
        "content": ""
    }
    
    , 
    {
        "url": "/docs/",
        "title": "Docs",
        "content": ""
    }
    
    , 
    {
        "url": "/categories/",
        "title": "Categories",
        "content": ""
    }
    
    , 
    {
        "url": "/tags/",
        "title": "Tags",
        "content": ""
    }
    
]